openapi: 3.0.2
components:
  paths:
    type_kind_domain:
      summary: Modify domains and regular expressions
      parameters:
        - $ref: '#/components/parameters/type'
        - $ref: '#/components/parameters/kind'
        - $ref: '#/components/parameters/domain'
      get:
        summary: Get domain
        description: |
          `{type}`, `{kind}`, and `{domain}` are optional. Specifying any of these may result in only a subset of the available data being returned.

          Valid combinations are:
          - `/api/domains` (all domains)
          - `/api/domains/abc.com` (all domains identical to `abc.com`)
          - `/api/domains/allow` (only allowed domains)
          - `/api/domains/allow/abc.com` (only allowed domains identical to `abc.com`)
          - `/api/domains/allow/exact` (only exactly allowed domains)
          - `/api/domains/allow/exact/abc.com` (only exactly allowed domain identical to `abc.com`)
          - `/api/domains/allow/regex` (only allowed regex domains)
          - `/api/domains/allow/regex/abc.com` (only allowed regex domains identical to `abc.com`)
          - `/api/domains/deny` (only denied domains)
          - `/api/domains/deny/abc.com` (only denied domains identical to `abc.com`)
          - `/api/domains/deny/exact` (only exactly denied domains)
          - `/api/domains/deny/exact/abc.com` (only exactly denied domain identical to `abc.com`)
          - `/api/domains/deny/regex` (only denied regex domains)
          - `/api/domains/deny/regex/abc.com` (only denied regex domains identical to `abc.com`)
          - `/api/domains/exact` (allowed and denied exact domains)
          - `/api/domains/exact/abc.com` (allowed and denied exact domains identical to `abc.com`)
          - `/api/domains/regex` (allowed and denied regex domains)
          - `/api/domains/regex/abc.com` (allowed and denied regex domains identical to `abc.com`)
        responses:
          '200':
            description: OK
            content:
              application/json:
                schema:
                  allOf:
                    - $ref: '#/components/schemas/domain'
                    - $ref: '#/components/schemas/oldtype'
                    - $ref: '#/components/schemas/oldkind'
                    - $ref: '#/components/schemas/comment'
                    - $ref: '#/components/schemas/groups'
                    - $ref: '#/components/schemas/enabled'
                    - $ref: '#/components/schemas/readonly'
      put:
        summary: Replace domain
        description: |
          Items may be updated by replacing them. `{type}`, `{kind}`, and `{domain}` are required.
          
          Ensure to send all the required parameters (such as `comment`) to ensure these properties are retained.
          The read-only fields `id` and `date_added` are preserved, `date_modified` is automatically updated on success.

          You can move existing domains to another list type/kind by `PUT`ting the domain to the new destination by specifying the optional fields `oldtype` and `oldkind`. Example:
          You can use `PUT allow/exact/abc.com` with `oldtype="deny", oldkind="exact"` to change `abc.com` from exact denied to exact allowed. Make sure to always specify *both* values.

          When adding/replacing a regular expression, ensure that `{domain}` is properly URI-escaped.
        requestBody:
          description: Callback payload
          content: 
            'application/json':
              schema:
                allOf:
                  - $ref: '#/components/schemas/oldtype'
                  - $ref: '#/components/schemas/oldkind'
                  - $ref: '#/components/schemas/comment'
                  - $ref: '#/components/schemas/groups'
                  - $ref: '#/components/schemas/enabled'
        responses:
          '201':
            description: Created domain
            content:
              application/json:
                schema:
                  allOf:
                    - $ref: '#/components/schemas/domain'
                    - $ref: '#/components/schemas/oldtype'
                    - $ref: '#/components/schemas/oldkind'
                    - $ref: '#/components/schemas/comment'
                    - $ref: '#/components/schemas/groups'
                    - $ref: '#/components/schemas/enabled'
                    - $ref: '#/components/schemas/readonly'
          '400':
            description: Bad request
            content:
              application/json:
                schema:
                  oneOf:
                  - $ref: '#/components/schemas/errors/list_imprecise'
                  - $ref: '#/components/schemas/errors/no_payload'
                  - $ref: '#/components/schemas/errors/item_missing'
                  - $ref: '#/components/schemas/errors/invalid_regex'
      delete:
        summary: Delete domain
        description: |
          *Note:* There will be no content on success.
        responses:
          '204':
            description: Item deleted
          '400':
            description: Bad request
            content:
              application/json:
                schema:
                  oneOf:
                  - $ref: '#/components/schemas/errors/list_imprecise'
                  - $ref: '#/components/schemas/errors/item_missing'
    type_kind:
      parameters:
        - $ref: '#/components/parameters/type'
        - $ref: '#/components/parameters/kind'
      post:
        summary: Add new domain
        description: |
          Creates a new domain in the `domains` object. This may be either an exact domain or a regex, depending on `{kind}`.
          Both `{type}` and `{kind}` are mandatory for this endpoint.
          The `{domain}` itself is specified in the request body (POST JSON).

          On success, a new ressource is created at `/domains/{type}/{kind}/{domain}`.

          The `database_error` with message `UNIQUE contraint failed` error indicates that the same entry (`domain`, `type`, `kind`) already exists.

          When adding a regular expression, ensure the request body is properly JSON-escaped.
        parameters:
          - $ref: '#/components/schemas/domain'
        requestBody:
          description: Callback payload
          content: 
            'application/json':
              schema:
                allOf:
                  - $ref: '#/components/schemas/domain'
                  - $ref: '#/components/schemas/type'
                  - $ref: '#/components/schemas/kind'
                  - $ref: '#/components/schemas/comment'
                  - $ref: '#/components/schemas/groups'
                  - $ref: '#/components/schemas/enabled'
        responses:
          '201':
            description: Created domain
            content:
              application/json:
                schema:
                  allOf:
                    - $ref: '#/components/schemas/domain'
                    - $ref: '#/components/schemas/type'
                    - $ref: '#/components/schemas/kind'
                    - $ref: '#/components/schemas/comment'
                    - $ref: '#/components/schemas/groups'
                    - $ref: '#/components/schemas/enabled'
                    - $ref: '#/components/schemas/readonly'
          '400':
            description: Bad request
            content:
              application/json:
                schema:
                  oneOf:
                  - $ref: '#/components/schemas/errors/list_imprecise'
                  - $ref: '#/components/schemas/errors/no_payload'
                  - $ref: '#/components/schemas/errors/duplicate'
                  - $ref: '#/components/schemas/errors/invalid_regex'
  schemas:
    domain:
      type: object
      properties:
        domain:
          description: Domain
          type: string
          required: true
          example: testdomain.com
    type:
      type: object
      properties:
        type:
          description: String specifying domain type
          type: enum
          required: true
          enum:
            - allow
            - deny
          example: allow
    oldtype:
      type: object
      summary: Extra property needed when moving an domain between types and/or kinds
      properties:
        oldtype:
          description: Type of domain *before* moving
          type: enum
          required: false
          enum:
            - allow
            - deny
          example: allow
    kind:
      type: object
      properties:
        kind:
          description: String specifying domain kind
          type: enum
          required: true
          enum:
            - exact
            - regex
          example: exact
    oldkind:
      type: object
      summary: Extra property needed when moving an domain between types and/or kinds
      properties:
        oldkind:
          description: Kind of domain *before* moving
          type: enum
          required: false
          enum:
            - exact
            - regex
          example: exact
    comment:
      type: object
      properties:
        comment:
          description: User-provided free-text comment for this domain (may be `null` if not specified)
          type: string
          required: false
          x-nullable: true
          default: null
          example: Some comment describing this domain
    groups:
      type: object
      properties:
        groups:
          description: Array of group IDs
          type: array
          default: [0]
          required: false
          items:
            type: integer
    enabled:
      type: object
      properties:
        enabled:
          description: Status of domain
          type: boolean
          required: false
          default: true
          example: true
    readonly:
      type: object
      summary: Readonly properties of a domain
      properties:
        id:
          description: Database ID
          type: integer
          readOnly: true
          example: 1
        date_added:
          description: Unix timestamp of domain addition
          type: integer
          readOnly: true
          example: 1611239095
        date_modified:
          description: Unix timestamp of last domain modification
          type: integer
          readOnly: true
          example: 1611239099
    errors:
      list_imprecise:
        type: object
        description: List not specified precisely enough
        properties:
          error:
            type: object
            properties:
              key:
                type: string
                description: "Machine-readable error type"
                example: "bad_request"
              message:
                type: string
                description: "Human-readable error message"
                example: "Invalid request: Specify list to modify more precisely"
              data:
                type: object
                properties:
                  action:
                    type: string
                    description: Action as received by the API
                    example: "/api/domains/allow"
                  item:
                    type: string
                    description: Item as received by the API
                    example: "testdomain.com"
      item_missing:
        type: object
        description: Item to be modified is missing
        properties:
          error:
            type: object
            properties:
              key:
                type: string
                description: "Machine-readable error type"
                example: "uri_error"
              message:
                type: string
                description: "Human-readable error message"
                example: "Invalid request: Specify item in URI"
              data:
                type: object
                properties:
                  action:
                    type: string
                    description: Action as received by the API
                    example: "/api/domains/allow/exact"
                  item:
                    type: string
                    description: Item as received by the API
                    example: ""
      no_payload:
        type: object
        description: No JSON payload found
        properties:
          error:
            type: object
            properties:
              key:
                type: string
                description: "Machine-readable error type"
                example: "bad_request"
              message:
                type: string
                description: "Human-readable error message"
                example: "Invalid request body data (no valid JSON)"
              data:
                type: null
                description: "Additional data (if available)"
                example: null
      duplicate:
        type: object
        description: Database error
        properties:
          error:
            type: object
            properties:
              key:
                type: string
                description: "Machine-readable error type"
                example: "database_error"
              message:
                type: string
                description: "Human-readable error message"
                example: "Could not add to gravity database"
              data:
                type: object
                properties:
                  domain:
                    type: string
                    description: Item as received by the API
                    example: "testdomain.com"
                  enabled:
                    type: boolean
                    description: Enabled property as received by the API
                    example: true
                  comment:
                    type: string
                    description: Comment property as received by the API
                    example: Some comment describing this domain
                  sql_msg:
                    type: string
                    description: Error returned by the database engine
                    example: "UNIQUE constraint failed: domainlist.domain"
      invalid_regex:
        type: object
        description: Invalid regex rejected
        properties:
          error:
            type: object
            properties:
              key:
                type: string
                description: "Machine-readable error type"
                example: "regex_error"
              message:
                type: string
                description: "Human-readable error message"
                example: "Regex validation failed"
              data:
                type: object
                properties:
                  domain:
                    type: string
                    description: Item as received by the API
                    example: "[[[[^"
                  enabled:
                    type: boolean
                    description: Enabled property as received by the API
                    example: true
                  comment:
                    type: string
                    description: Comment property as received by the API
                    example: Some comment describing this domain
                  regex_msg:
                    type: string
                    description: Error returned by the regex engine
                    example: "Missing ']'"
  parameters:
    type:
      in: path
      description: Type (allowed or denied domain)
      name: type
      schema:
        type: string
        enum:
          - allow
          - deny
      required: true
      example: allow
    kind:
      in: path
      name: kind
      schema:
        type: string
        enum:
          - exact
          - regex
      required: true
      description: Kind (exact domain or regular expression)
      example: exact
    domain:
      in: path
      name: domain
      schema:
        type: string
      required: true
      description: Domain
      example: testdomain.com
